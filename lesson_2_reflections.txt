What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, the zero state of the version control is set. This is the state from which git begins tracking any changes to any file in that directory. This is required as this is the very first step in running version control. The changes to the file would not be tracked if this wasn't done. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging aea is different in that it is not an actual directory. It is simply an in-between state which allows you see what files you are comitting. It gives you a chance to visually review what you are doing and a chance to cancel or amend which files you want to commit. 

How can you use the staging area to make sure you have one commit per logical change?

You can check the differnces between the staging area and the working directory with git diff to see which changes are being staged. As long as this corresponds to a logical change, you can go ahead and commit it. 
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when making experimental changes or if there is a need to establish a separate timeline for adding a separate set of features, different language version, etc. They make it easy to follow the separate history line for these commits. 

How do the diagrams help you visualize the branch structure?

These help illustrate the linear patterns of each branch and how that ties into the version history. It is also useful in showing which commits can be reached and which can be forgotten. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together, the commits on both branches get arranged into the same timeline and are organized by timestamp. These are represented as such in the diagram to keep the history intact and to show the common parent element and the commit history of the merged branch. 