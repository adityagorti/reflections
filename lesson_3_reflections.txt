When would you want to use a remote repository rather than keeping all your work local?

If you are using different computers to work on a project or working with other users and need a centralized place to push all your changes,then a remote repository is much preferred to keeping your work local. 


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	This is so that you can decide which commits should be sent to the remote repository. If Git automatically updtaed, then changes/commits that you did not want to be made public or added to the remote repo would be. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks - copying a repo directly in Github. You basically make a copy and then can modify the copy as you need to. The original will be preserved and only the forked copy is modified.

Clones - Make a clone(exact copy) of a repo. You can do this both locally or clone a copy stored on GitHub to your local machine.

Branches - A string of commits. You can have different branches in your repo which can store different timelines or different features. Youc an merge branches as need be to bring different timelines together. 

What is the benefit of having a copy of the last known state of the remote stored locally?

	This is beneficial because you can have a working copy of the remote even without internet access and continue work on your local repo. Once you are done, and merge the changes with the local remote, then you can push the changes back to GitHub whenever you regain internet access. 


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Without Git/GitHub, my preferred method of collaboration would probably be dropbox. I can upload files as needed and have others review it and even copy and download to their own machines. It would be easier to upload as you can simply drag and drop files to dropbox and let them upload. Downloading it is just as easy.

	However, everything else such as documenting the version control history, going back to a certain stage of the project, etc would be much harder. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Since the master is the main branch which contains the major/correct updates to the project, when there is a feature or code not agreed on or still being collaborated on, it is best to work on it in a separate branch and then bring it into master once finalized. 

	Working directly in master has the advantage of keeping the process simple, you simply work and commit in the same branch. However, this may lead a lot of conflicts if different collaborators are all working on master and commiting their changes. Working with a separate branch keeps this process separate and the master clean. 